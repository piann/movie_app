{"version":3,"sources":["logo.svg","Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Movie","_ref","title","poster","genres","synopsis","react_default","a","createElement","className","MoviePoster","alt","map","genre","index","MovieGenre","key","_ref2","src","_ref3","PropTypes","string","isRequired","array","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","potato","json","jj","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8PCOxC,SAASC,EAATC,GAAiD,IAAjCC,EAAiCD,EAAjCC,MAAOC,EAA0BF,EAA1BE,OAAQC,EAAkBH,EAAlBG,OAAQC,EAAUJ,EAAVI,SACnC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAACE,EAAD,CAAaP,OAAQA,EAAQQ,IAAKT,KAElCI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVL,EAAOQ,IAAI,SAACC,EAAOC,GAAR,OAAkBR,EAAAC,EAAAC,cAACO,EAAD,CAAYF,MAAOA,EAAOG,IAAKF,OAEjER,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBACRJ,KAUjB,SAASK,EAATO,GAAmC,IAAbd,EAAac,EAAbd,OAAQQ,EAAKM,EAALN,IAC1B,OACIL,EAAAC,EAAAC,cAAA,OAAKU,IAAKf,EAAQQ,IAAKA,EAAKT,MAAOS,EAAKF,UAAU,kBAK1D,SAASM,EAATI,GAA4B,IAAPN,EAAOM,EAAPN,MACjB,OACIP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAiBI,GAKzCb,EAAMoB,UAAW,CACblB,MAAMkB,IAAUC,OAAOC,WACvBnB,OAAOiB,IAAUC,OAAOC,WACxBlB,OAAQgB,IAAUG,MAAMD,WACxBjB,SAAUe,IAAUC,OAAOC,YAG/BP,EAAWK,UAAW,CAClBP,MAAMO,IAAUC,OAAOC,YAKZtB,QCaAwB,6MA/CbC,MAAQ,KAURC,cAAgB,WAMZ,OAJcC,EAAKF,MAAMG,OAAOhB,IAAI,SAACiB,GACnC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,CAAO5B,MAAO2B,EAAME,cAAe5B,OAAQ0B,EAAMG,mBACxDhB,IAAKa,EAAMI,GAAI7B,OAAQyB,EAAMzB,OAAQC,SAAUwB,EAAMxB,gBAK3D6B,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAA7B,EAAA8B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAEXf,EAAKgB,SAAS,CAACf,WAFJ,wBAAAU,EAAAM,SAAAT,EAAAU,WAKbJ,SAAW,WACT,OAAOK,MAAM,yDACZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAG,GAAE,OAAIA,EAAGC,KAAKvB,SAEnBwB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFAtB1BR,KAAKX,8CA6BL,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEdoC,KAAKpB,MAAMG,OAASiB,KAAKnB,gBAAkB,oBAzChC8B,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.a6dc00c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './Movie.css';\nimport PropTypes from 'prop-types';\n\n\n\n\nfunction Movie({title, poster, genres, synopsis}){\n    return(\n        <div className=\"Movie\">\n        <div className=\"Movie__Columns\">\n        <MoviePoster poster={poster} alt={title}/>\n        </div>\n        <div className=\"Movie__Columns\">\n            <h1>{title}</h1>\n            <div className=\"Movie__Genres\">\n                {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\n            </div>\n            <p className=\"Movie__Synopsis\">\n                {synopsis}\n            </p>\n        </div>\n        </div>\n        \n    )\n\n}\n\n\nfunction MoviePoster({poster, alt}){\n    return(\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\n    )\n}\n\n\nfunction MovieGenre({genre}){\n    return(\n        <span className=\"Movie__Genres\">{genre}</span>\n    )\n\n}\n\nMovie.PropTypes ={\n    title:PropTypes.string.isRequired,\n    poster:PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\n\nMovieGenre.PropTypes ={\n    genre:PropTypes.string.isRequired\n\n}\n\n\nexport default Movie;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Movie from './Movie';\n\n\nconst movieTitles = [\n\"Matrix\",\n\"Oldboy\",\n\"Hunger Game\"\n]\n\nconst movieImages = [\n  \"http://cdn.collider.com/wp-content/uploads/spike-lee-slice.jpg\",\n  \"https://www.google.com/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwjhgKOirtHeAhWQdt4KHXMcB58QjRx6BAgBEAU&url=https%3A%2F%2Fgiphy.com%2Fgifs%2Foldboy-b9CYrQNAc75Ys&psig=AOvVaw1MYL9Gd2CEIrHU7EEpSmLx&ust=1542191063093128\",\n  \"https://upload.wikimedia.org/wikipedia/en/3/39/The_Hunger_Games_cover.jpg\"\n]\n\n\n\nclass App extends Component {\n  \n  state = {\n    \n\n      \n  }\n\n  componentDidMount(){\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n     \n    const movies =  this.state.movies.map((movie) => {\n        return <Movie title={movie.title_english} poster={movie.medium_cover_image}\n        key={movie.id} genres={movie.genres} synopsis={movie.synopsis}/>\n      })\n      return movies\n  }\n\n  _getMovies = async () =>{\n    const movies = await this._callApi() \n    this.setState({movies})\n  }\n\n  _callApi = () =>{\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n    .then(potato => potato.json())\n    .then(jj => jj.data.movies)\n   \n    .catch(err => console.log(err))\n\n  }\n\n  render() {\n\n    \n    return (\n      <div className=\"App\">\n      \n      {this.state.movies ? this._renderMovies() : 'Loading..'}\n      \n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}